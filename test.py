import numpy as np
import scipy
import matplotlib.pyplot as plt
from matplotlib import cm
import os
import sys
import shutil

import mylib as my
import table_data
#import lattice_gas
#import izing

def slurm_time_distr():
	times_list = [[0,2,9], [0,2,11], [0,2,13], [0,2,54], [0,2,59], [0,3,1], [0,3,42], [0,4,2], [0,5,4], [0,5,11], [0,5,13], [0,5,43], [0,6,3], [0,6,27], [0,7,49], [0,8,54], [0,9,42], [0,9,54], [0,9,57], [0,10,26], [0,10,56], [0,11,25], [0,11,35], [0,12,8], [0,12,17], [0,12,55], [0,12,57], [0,13,40], [0,14,58], [0,17,12], [0,18,7], [0,18,13], [0,18,28], [0,19,1], [0,19,13], [0,19,28], [0,19,44], [0,22,1], [0,24,21], [0,27,11], [0,28,25], [0,31,7], [0,31,27], [0,35,54], [0,40,3], [0,41,14], [0,45,12], [0,44,29], [0,43,40], [0,47,6], [0,47,29], [0,51,36], [0,58,4], [1,10,41], [1,22,1], [1,20,27], [1,29,7], [1,30,41], [1,35,30], [1,44,5], [1,50,8], [1,51,1], [1,52,5], [1,53,4], [2,10,10], [2,18,23], [2,19,37], [2,20,40], [2,32,29], [2,39,1], [2,40,57], [2,44,0], [2,45,56], [2,47,29], [3,28,55], [4,19,17], [4,25,37], [4,29,43], [5,34,41]]
	
	times = np.array([(t[2] + 60 * (t[1] + 60 * t[0])) for t in times_list])
	
	N = 10
	edges = np.exp(np.linspace(np.log(min(times) * 0.99), np.log(max(times) * 1.01), N))
	hist, _ = np.histogram(times, bins=edges)
	lens = edges[1:] - edges[:-1]
	rho = hist / np.sum(hist) / lens
	t_centers = np.sqrt(edges[1:] * edges[:-1])
	
	#fix, ax, _ = my.get_fig(r'$\log_{10}(t/[sec])$', r'$\sim \rho$', title=r'$\rho(t)$', yscl='log')
	fix, ax, _ = my.get_fig(r't (sec)', r'$\rho_t$', title=r'$\rho(t)$', xscl='log', yscl='log')
	
	ax.errorbar(t_centers, rho, fmt='.-', label='data')
	ax.plot(t_centers, 1e-3 * 170 / t_centers, label='A/t')
	for i, e in enumerate(edges):
		ax.plot([e]*2, [min(rho), max(rho)], '--', color=my.get_my_color(4), label='edges' if(i == 0) else None)
	
	ax.legend()
	
	plt.show()

def avg_times_FFS(thr_std=6, slurm_time=144):
	Temp_s = np.array([0.8, 0.85, 0.9, 0.95, 1.0])
	phi_s = np.array([14, 14.5, 15, 15.5, 16]) / 1000
	
	'''
		str substitutions
		
		{
			-
			 + (1/60) * (
		}
		and
		{
			\n
			)), 
		}
		and
		{
			.
			*24 + 
		}
		=======
		{
			, )), )), 
			\n
		}
	'''
	
	time_data = {\
			'swap'    : {\
					'0.85': {'0.014' : [29+ (1/60) * (6+ (1/60) * (36)), 25+ (1/60) * (49+ (1/60) * (47)), 24+ (1/60) * (23+ (1/60) * (43)), 21+ (1/60) * (46+ (1/60) * (20)), 20+ (1/60) * (37+ (1/60) * (5)), 20+ (1/60) * (2+ (1/60) * (22)), 18+ (1/60) * (19+ (1/60) * (35)), 17+ (1/60) * (42+ (1/60) * (57)), 17+ (1/60) * (31+ (1/60) * (35)), 16+ (1/60) * (32+ (1/60) * (26))], \
							 '0.0145': [23+ (1/60) * (47+ (1/60) * (26)), 22+ (1/60) * (5+ (1/60) * (31)), 20+ (1/60) * (13+ (1/60) * (29)), 20+ (1/60) * (8+ (1/60) * (9)), 18+ (1/60) * (51+ (1/60) * (51)), 18+ (1/60) * (28+ (1/60) * (13)), 18+ (1/60) * (24+ (1/60) * (5)), 18+ (1/60) * (17+ (1/60) * (37)), 16+ (1/60) * (44+ (1/60) * (42)), 15+ (1/60) * (29+ (1/60) * (3))], \
							 '0.015' : [22+ (1/60) * (5+ (1/60) * (57)), 21+ (1/60) * (25+ (1/60) * (10)), 21+ (1/60) * (9+ (1/60) * (10)), 19+ (1/60) * (36+ (1/60) * (33)), 19+ (1/60) * (12+ (1/60) * (29)), 17+ (1/60) * (59+ (1/60) * (59)), 17+ (1/60) * (28+ (1/60) * (57)), 16+ (1/60) * (34+ (1/60) * (25)), 15+ (1/60) * (38+ (1/60) * (25)), 15+ (1/60) * (23+ (1/60) * (6))], \
							 '0.0155': [20+ (1/60) * (42+ (1/60) * (27)), 20+ (1/60) * (24+ (1/60) * (24)), 19+ (1/60) * (40+ (1/60) * (40)), 18+ (1/60) * (27+ (1/60) * (14)), 17+ (1/60) * (48+ (1/60) * (51)), 16+ (1/60) * (54+ (1/60) * (52)), 16+ (1/60) * (23+ (1/60) * (38)), 16+ (1/60) * (2+ (1/60) * (8)), 15+ (1/60) * (46+ (1/60) * (5)), 14+ (1/60) * (48+ (1/60) * (44))], \
							 '0.016' : [19+ (1/60) * (22+ (1/60) * (29)), 19+ (1/60) * (19+ (1/60) * (19)), 19+ (1/60) * (18+ (1/60) * (32)), 18+ (1/60) * (23+ (1/60) * (17)), 17+ (1/60) * (29+ (1/60) * (24)), 17+ (1/60) * (7+ (1/60) * (58)), 16+ (1/60) * (39+ (1/60) * (9)), 16+ (1/60) * (12+ (1/60) * (53)), 15+ (1/60) * (14+ (1/60) * (53)), 13+ (1/60) * (54+ (1/60) * (51))]}, \
					'0.95': {'0.014' : [13 + 55/60, 12 + 27/60, 12 + 26/60, 12 + 16/60, 12 + 18/60, 11 + 26/60, 11 + 24/60, 11 + 16/60, 10 + 24/60, 10 + 18/60, 9 + 49/60, 9 + 45/60, 9 + 36/60, 9 + 14/60, 9 + 7/60, 8 + 51/60, 8 + 53/60, 8 + 37/60, 8 + 28/60, 7 + 27/60], \
							 '0.0145': [12 + (1/60) * (25 + (1/60) * (40)), 12 + (1/60) * (16 + (1/60) * (26)), 11 + (1/60) * (16 + (1/60) * (20)), 9 + (1/60) * (48 + (1/60) * (46)), 9 + (1/60) * (36 + (1/60) * (17)), 9 + (1/60) * (7 + (1/60) * (4)), 8 + (1/60) * (53 + (1/60) * (33)), 8 + (1/60) * (36 + (1/60) * (53)), 8 + (1/60) * (27 + (1/60) * (38)), 7 + (1/60) * (26 + (1/60) * (43))], \
							 '0.015' : [16+ (1/60) * (22+ (1/60) * (56)), 13+ (1/60) * (14+ (1/60) * (6)), 12+ (1/60) * (58+ (1/60) * (30)), 12+ (1/60) * (7+ (1/60) * (52)), 11+ (1/60) * (58+ (1/60) * (10)), 11+ (1/60) * (31+ (1/60) * (23)), 10+ (1/60) * (31+ (1/60) * (18)), 10+ (1/60) * (22+ (1/60) * (6)), 10+ (1/60) * (17+ (1/60) * (47)), 9+ (1/60) * (31+ (1/60) * (58))], \
							 '0.0155': [22+ (1/60) * (56+ (1/60) * (26)), 22+ (1/60) * (19+ (1/60) * (42)), 21+ (1/60) * (40+ (1/60) * (45)), 21+ (1/60) * (36+ (1/60) * (17)), 20+ (1/60) * (3+ (1/60) * (2)), 19+ (1/60) * (42+ (1/60) * (5)), 19+ (1/60) * (35+ (1/60) * (16)), 19+ (1/60) * (23+ (1/60) * (55)), 18+ (1/60) * (8+ (1/60) * (30)), 17+ (1/60) * (2+ (1/60) * (35))], \
							 '0.016' : [26+ (1/60) * (6+ (1/60) * (36)), 25+ (1/60) * (4+ (1/60) * (59)), 23+ (1/60) * (38+ (1/60) * (55)), 23+ (1/60) * (29+ (1/60) * (45)), 23+ (1/60) * (20+ (1/60) * (13)), 22+ (1/60) * (5+ (1/60) * (47)), 19+ (1/60) * (51+ (1/60) * (33)), 19+ (1/60) * (2+ (1/60) * (17)), 18+ (1/60) * (46+ (1/60) * (2)), 17+ (1/60) * (55+ (1/60) * (21))]}, \
					'1.0' : {'0.014' : [4*24 + 21 + (1/60) * (46 + (1/60) * (22)), 4*24 + 8 + (1/60) * (25 + (1/60) * (14)), 3*24 + 22 + (1/60) * (34 + (1/60) * (59)), 3*24 + 22 + (1/60) * (6 + (1/60) * (13)), 3*24 + 20 + (1/60) * (58 + (1/60) * (47)), 3*24 + 18 + (1/60) * (58 + (1/60) * (55)), 3*24 + 17 + (1/60) * (32 + (1/60) * (57)), 3*24 + 11 + (1/60) * (49 + (1/60) * (56)), 3*24 + 3 + (1/60) * (33 + (1/60) * (43)), 2*24 + 23 + (1/60) * (21 + (1/60) * (23))], \
							 '0.0145': [4*24 + 14 + (1/60) * (29 + (1/60) * (24)), 3*24 + 21 + (1/60) * (36 + (1/60) * (27)), 3*24 + 17 + (1/60) * (31 + (1/60) * (29)), 3*24 + 10 + (1/60) * (41 + (1/60) * (19)), 3*24 + 8 + (1/60) * (7 + (1/60) * (52)), 3*24 + 7 + (1/60) * (36 + (1/60) * (38)), 3*24 + 3 + (1/60) * (48 + (1/60) * (32)), 3*24 + 1 + (1/60) * (11 + (1/60) * (36)), 3*24 + 0 + (1/60) * (30 + (1/60) * (31)), 2*24 + 23 + (1/60) * (24 + (1/60) * (53))], \
							 '0.015' : [2 * 24 + 11 + (1/60) * (21 + (1/60) * (14)), 2 * 24 + 8 + (1/60) * (16 + (1/60) * (25)), 2 * 24 + 7 + (1/60) * (53 + (1/60) * (38)), 2 * 24 + 5 + (1/60) * (23 + (1/60) * (45)), 2 * 24 + 4 + (1/60) * (51 + (1/60) * (33)), 2 * 24 + 3 + (1/60) * (56 + (1/60) * (25)), 2 * 24 + 3 + (1/60) * (16 + (1/60) * (8)), 2 * 24 + 2 + (1/60) * (7 + (1/60) * (17)), 2 * 24 + 1 + (1/60) * (35 + (1/60) * (39)), 2 * 24 + 0 + (1/60) * (32 + (1/60) * (27)), 2 * 24 + 0 + (1/60) * (7 + (1/60) * (19)), 2 * 24 + 0 + (1/60) * (2 + (1/60) * (11)), 1 * 24 + 23 + (1/60) * (25 + (1/60) * (29)), 1 * 24 + 23 + (1/60) * (20 + (1/60) * (51)), 1 * 24 + 23 + (1/60) * (18 + (1/60) * (48)), 1 * 24 + 23 + (1/60) * (2 + (1/60) * (50)), 1 * 24 + 22 + (1/60) * (4 + (1/60) * (52)), 1 * 24 + 21 + (1/60) * (26 + (1/60) * (30)), 1 * 24 + 20 + (1/60) * (41 + (1/60) * (39)), 1 * 24 + 20 + (1/60) * (1 + (1/60) * (51)), 1 * 24 + 20 + (1/60) * (5 + (1/60) * (59)), 1 * 24 + 19 + (1/60) * (30 + (1/60) * (28)), 1 * 24 + 19 + (1/60) * (41 + (1/60) * (37)), 1 * 24 + 18 + (1/60) * (46 + (1/60) * (40)), 1 * 24 + 18 + (1/60) * (42 + (1/60) * (42)), 1 * 24 + 18 + (1/60) * (9 + (1/60) * (41)), 1 * 24 + 18 + (1/60) * (26 + (1/60) * (18)), 1 * 24 + 17 + (1/60) * (34 + (1/60) * (45)), 1 * 24 + 17 + (1/60) * (43 + (1/60) * (27)), 1 * 24 + 16 + (1/60) * (43 + (1/60) * (46)), 1 * 24 + 16 + (1/60) * (13 + (1/60) * (45)), 1 * 24 + 16 + (1/60) * (8 + (1/60) * (41)), 1 * 24 + 15 + (1/60) * (37 + (1/60) * (57)), 1 * 24 + 15 + (1/60) * (3 + (1/60) * (27)), 1 * 24 + 13 + (1/60) * (39 + (1/60) * (54)), 1 * 24 + 11 + (1/60) * (49 + (1/60) * (15)), 1 * 24 + 11 + (1/60) * (22 + (1/60) * (58)), 1 * 24 + 10 + (1/60) * (49 + (1/60) * (45)), 1 * 24 + 10 + (1/60) * (28 + (1/60) * (40)), 1 * 24 + 9 + (1/60) * (13 + (1/60) * (45)), 1 * 24 + 8 + (1/60) * (55 + (1/60) * (26)), 1 * 24 + 6 + (1/60) * (24 + (1/60) * (31))]}\
							} , \
#					'1.0' : {'0.014' : [53 + 53/60, 53 + 4/60, 47 + 12/60, 47 + 22/60, 46 + 19/60, 40 + 49/60, 37 + 16/60, 36 + 49/60, 30 + 47/60, 28 + 14/60], \
#							 '0.0145': [49 + 50/60, 37 + 49/60, 36 + 7/60, 32 + 56/60, 32 + 25/60, 31 + 44/60, 29 + 19/60, 28 + 24/60, 28 + 9/60, 26 + 48/60], \
#							 '0.015' : [2 * 24 + 11 + (1/60) * (21 + (1/60) * (14)), 2 * 24 + 8 + (1/60) * (16 + (1/60) * (25)), 2 * 24 + 7 + (1/60) * (53 + (1/60) * (38)), 2 * 24 + 5 + (1/60) * (23 + (1/60) * (45)), 2 * 24 + 4 + (1/60) * (51 + (1/60) * (33)), 2 * 24 + 3 + (1/60) * (56 + (1/60) * (25)), 2 * 24 + 3 + (1/60) * (16 + (1/60) * (8)), 2 * 24 + 2 + (1/60) * (7 + (1/60) * (17)), 2 * 24 + 1 + (1/60) * (35 + (1/60) * (39)), 2 * 24 + 0 + (1/60) * (32 + (1/60) * (27)), 2 * 24 + 0 + (1/60) * (7 + (1/60) * (19)), 2 * 24 + 0 + (1/60) * (2 + (1/60) * (11)), 1 * 24 + 23 + (1/60) * (25 + (1/60) * (29)), 1 * 24 + 23 + (1/60) * (20 + (1/60) * (51)), 1 * 24 + 23 + (1/60) * (18 + (1/60) * (48)), 1 * 24 + 23 + (1/60) * (2 + (1/60) * (50)), 1 * 24 + 22 + (1/60) * (4 + (1/60) * (52)), 1 * 24 + 21 + (1/60) * (26 + (1/60) * (30)), 1 * 24 + 20 + (1/60) * (41 + (1/60) * (39)), 1 * 24 + 20 + (1/60) * (1 + (1/60) * (51)), 1 * 24 + 20 + (1/60) * (5 + (1/60) * (59)), 1 * 24 + 19 + (1/60) * (30 + (1/60) * (28)), 1 * 24 + 19 + (1/60) * (41 + (1/60) * (37)), 1 * 24 + 18 + (1/60) * (46 + (1/60) * (40)), 1 * 24 + 18 + (1/60) * (42 + (1/60) * (42)), 1 * 24 + 18 + (1/60) * (9 + (1/60) * (41)), 1 * 24 + 18 + (1/60) * (26 + (1/60) * (18)), 1 * 24 + 17 + (1/60) * (34 + (1/60) * (45)), 1 * 24 + 17 + (1/60) * (43 + (1/60) * (27)), 1 * 24 + 16 + (1/60) * (43 + (1/60) * (46)), 1 * 24 + 16 + (1/60) * (13 + (1/60) * (45)), 1 * 24 + 16 + (1/60) * (8 + (1/60) * (41)), 1 * 24 + 15 + (1/60) * (37 + (1/60) * (57)), 1 * 24 + 15 + (1/60) * (3 + (1/60) * (27)), 1 * 24 + 13 + (1/60) * (39 + (1/60) * (54)), 1 * 24 + 11 + (1/60) * (49 + (1/60) * (15)), 1 * 24 + 11 + (1/60) * (22 + (1/60) * (58)), 1 * 24 + 10 + (1/60) * (49 + (1/60) * (45)), 1 * 24 + 10 + (1/60) * (28 + (1/60) * (40)), 1 * 24 + 9 + (1/60) * (13 + (1/60) * (45)), 1 * 24 + 8 + (1/60) * (55 + (1/60) * (26)), 1 * 24 + 6 + (1/60) * (24 + (1/60) * (31))]}\
		
		  'long_swap' : {\
					'0.85': {'0.014' : [8 + (1/60) * (43 + (1/60) * (18)), 8 + (1/60) * (43 + (1/60) * (0)), 8 + (1/60) * (32 + (1/60) * (13)), 8 + (1/60) * (37 + (1/60) * (13)), 8 + (1/60) * (15 + (1/60) * (45)), 8 + (1/60) * (8 + (1/60) * (47)), 8 + (1/60) * (0 + (1/60) * (54)), 7 + (1/60) * (40 + (1/60) * (39)), 7 + (1/60) * (40 + (1/60) * (12)), 7 + (1/60) * (26 + (1/60) * (59))], \
							 '0.0145': [8 + (1/60) * (57 + (1/60) * (1)), 8 + (1/60) * (26 + (1/60) * (4)), 8 + (1/60) * (19 + (1/60) * (30)), 8 + (1/60) * (17 + (1/60) * (29)), 8 + (1/60) * (4 + (1/60) * (11)), 7 + (1/60) * (59 + (1/60) * (35)), 8 + (1/60) * (0 + (1/60) * (31)), 7 + (1/60) * (47 + (1/60) * (52)), 7 + (1/60) * (12 + (1/60) * (55)), 7 + (1/60) * (0 + (1/60) * (23))], \
							 '0.015' : [8 + (1/60) * (16 + (1/60) * (20)), 7 + (1/60) * (59 + (1/60) * (3)), 7 + (1/60) * (55 + (1/60) * (57)), 7 + (1/60) * (54 + (1/60) * (45)), 7 + (1/60) * (43 + (1/60) * (50)), 7 + (1/60) * (39 + (1/60) * (21)), 7 + (1/60) * (42 + (1/60) * (54)), 7 + (1/60) * (22 + (1/60) * (25)), 6 + (1/60) * (57 + (1/60) * (39)), 6 + (1/60) * (55 + (1/60) * (31))], \
							 '0.0155': [7 + (1/60) * (54 + (1/60) * (38)), 7 + (1/60) * (32 + (1/60) * (35)), 7 + (1/60) * (35 + (1/60) * (15)), 7 + (1/60) * (10 + (1/60) * (1)), 7 + (1/60) * (12 + (1/60) * (17)), 7 + (1/60) * (7 + (1/60) * (11)), 7 + (1/60) * (1 + (1/60) * (13)), 6 + (1/60) * (55 + (1/60) * (28)), 6 + (1/60) * (51 + (1/60) * (39)), 6 + (1/60) * (38 + (1/60) * (33))], \
							 '0.016' : [7 + (1/60) * (11 + (1/60) * (56)), 7 + (1/60) * (13 + (1/60) * (10)), 7 + (1/60) * (3 + (1/60) * (31)), 6 + (1/60) * (51 + (1/60) * (2)), 6 + (1/60) * (44 + (1/60) * (51)), 6 + (1/60) * (31 + (1/60) * (24)), 6 + (1/60) * (34 + (1/60) * (15)), 6 + (1/60) * (28 + (1/60) * (0)), 6 + (1/60) * (24 + (1/60) * (32)), 5 + (1/60) * (48 + (1/60) * (55))]}, \
					'0.9' : {'0.014' : [20 + (1/60) * (9 + (1/60) * (51)), 19 + (1/60) * (16 + (1/60) * (56)), 19 + (1/60) * (8 + (1/60) * (38)), 18 + (1/60) * (43 + (1/60) * (2)), 18 + (1/60) * (18 + (1/60) * (15)), 18 + (1/60) * (13 + (1/60) * (50)), 17 + (1/60) * (59 + (1/60) * (36)), 17 + (1/60) * (55 + (1/60) * (46)), 17 + (1/60) * (54 + (1/60) * (52)), 17 + (1/60) * (29 + (1/60) * (29))], \
							 '0.0145': [19 + (1/60) * (29 + (1/60) * (26)), 19 + (1/60) * (24 + (1/60) * (15)), 19 + (1/60) * (18 + (1/60) * (58)), 19 + (1/60) * (9 + (1/60) * (21)), 18 + (1/60) * (19 + (1/60) * (20)), 18 + (1/60) * (8 + (1/60) * (54)), 18 + (1/60) * (7 + (1/60) * (12)), 17 + (1/60) * (59 + (1/60) * (41)), 17 + (1/60) * (26 + (1/60) * (13)), 16 + (1/60) * (57 + (1/60) * (38))], \
							 '0.015' : [20 + (1/60) * (16 + (1/60) * (17)), 19 + (1/60) * (20 + (1/60) * (56)), 18 + (1/60) * (59 + (1/60) * (48)), 18 + (1/60) * (44 + (1/60) * (22)), 18 + (1/60) * (42 + (1/60) * (10)), 18 + (1/60) * (9 + (1/60) * (31)), 18 + (1/60) * (0 + (1/60) * (56)), 17 + (1/60) * (50 + (1/60) * (0)), 17 + (1/60) * (47 + (1/60) * (6)), 17 + (1/60) * (44 + (1/60) * (24))], \
							 '0.0155': [18 + (1/60) * (28 + (1/60) * (12)), 18 + (1/60) * (16 + (1/60) * (59)), 18 + (1/60) * (8 + (1/60) * (7)), 17 + (1/60) * (51 + (1/60) * (39)), 17 + (1/60) * (22 + (1/60) * (28)), 17 + (1/60) * (8 + (1/60) * (1)), 16 + (1/60) * (57 + (1/60) * (47)), 16 + (1/60) * (57 + (1/60) * (5)), 16 + (1/60) * (19 + (1/60) * (24)), 16 + (1/60) * (17 + (1/60) * (31))], \
							 '0.016' : [18 + (1/60) * (0 + (1/60) * (11)), 17 + (1/60) * (47 + (1/60) * (6)), 17 + (1/60) * (37 + (1/60) * (51)), 17 + (1/60) * (32 + (1/60) * (47)), 17 + (1/60) * (24 + (1/60) * (34)), 16 + (1/60) * (48 + (1/60) * (22)), 16 + (1/60) * (43 + (1/60) * (30)), 16 + (1/60) * (22 + (1/60) * (39)), 15 + (1/60) * (55 + (1/60) * (54)), 15 + (1/60) * (35 + (1/60) * (31))]}, \
					'0.95': {'0.014' : [0 + (1/60) * (20 + (1/60) * (2)), 0 + (1/60) * (18 + (1/60) * (50)), 0 + (1/60) * (17 + (1/60) * (4)), 0 + (1/60) * (19 + (1/60) * (11)), 0 + (1/60) * (18 + (1/60) * (36)), 0 + (1/60) * (17 + (1/60) * (11)), 0 + (1/60) * (16 + (1/60) * (13)), 0 + (1/60) * (17 + (1/60) * (7)), 0 + (1/60) * (17 + (1/60) * (29)), 0 + (1/60) * (14 + (1/60) * (6))], \
							 '0.0145': [4 + (1/60) * (25 + (1/60) * (52)), 4 + (1/60) * (18 + (1/60) * (34)), 4 + (1/60) * (16 + (1/60) * (19)), 4 + (1/60) * (16 + (1/60) * (57)), 4 + (1/60) * (15 + (1/60) * (4)), 4 + (1/60) * (4 + (1/60) * (4)), 4 + (1/60) * (6 + (1/60) * (21)), 4 + (1/60) * (4 + (1/60) * (28)), 4 + (1/60) * (1 + (1/60) * (16)), 3 + (1/60) * (57 + (1/60) * (12))], \
							 '0.015' : [7 + (1/60) * (31 + (1/60) * (4)), 7 + (1/60) * (18 + (1/60) * (11)), 6 + (1/60) * (55 + (1/60) * (42)), 6 + (1/60) * (57 + (1/60) * (21)), 6 + (1/60) * (54 + (1/60) * (46)), 6 + (1/60) * (55 + (1/60) * (50)), 6 + (1/60) * (46 + (1/60) * (16)), 6 + (1/60) * (28 + (1/60) * (25)), 6 + (1/60) * (17 + (1/60) * (12)), 6 + (1/60) * (18 + (1/60) * (3))], \
							 '0.0155': [11 + 42/60, 10 + 54/60, 10 + 41/60, 10 + 29/60, 10 + 12/60, 10 + 7/60, 10 + 0/60, 9 + 48/60, 9 + 40/60, 9 + 27/60], \
							 '0.016' : [13 + 24/60, 13 + 14/60, 13 + 6/60, 12 + 50/60, 12 + 54/60, 12 + 50/60, 12 + 37/60, 12 + 32/60, 12 + 32/60, 12 + 19/60]}, \
					'1.0' : {'0.014' : [2*24 + 1 + (1/60) * (32 + (1/60) * (43)), 1*24 + 21 + (1/60) * (36 + (1/60) * (0)), 1*24 + 21 + (1/60) * (9 + (1/60) * (55)), 1*24 + 20 + (1/60) * (58 + (1/60) * (34)), 1*24 + 15 + (1/60) * (12 + (1/60) * (0)), 1*24 + 14 + (1/60) * (53 + (1/60) * (34)), 1*24 + 15 + (1/60) * (6 + (1/60) * (27)), 1*24 + 14 + (1/60) * (31 + (1/60) * (57)), 1*24 + 14 + (1/60) * (17 + (1/60) * (27)), 1*24 + 12 + (1/60) * (53 + (1/60) * (32))], \
							 '0.0145': [23 + 56/60, 23 + 40/60, 23 + 28/60, 23 + 23/60, 22 + 48/60, 22 + 40/60, 22 + 39/60, 22 + 18/60, 22 + 10/60, 21 + 34/60, 21 + 17/60, 21 + 5/60, 21 + 3/60, 21 + 3/60, 21 + 0/60, 20 + 53/60, 20 + 36/60, 19 + 57/60, 19 + 35/60, 23 + 13/60, 23 + 6/60, 22 + 41/60, 22 + 36/60, 22 + 18/60, 21 + 59/60, 21 + 21/60, 21 + 18/60, 23 + 1.15, 23 + 1.3, 23 + 1.5, 23 + 2, 23 + 2.7]}\
						}\
				}
	
	n_base = {\
		'swap'      : {
					'0.85': {'0.014' : 45, \
							 '0.0145': 45, \
							 '0.015' : 45, \
							 '0.0155': 45, \
							 '0.016' : 45}, \
					'0.95': {'0.014' : 20, \
							 '0.0145': 20, \
							 '0.015' : 33, \
							 '0.0155': 57, \
							 '0.016' : 63}, \
					'1.0' : {'0.014' : 29, \
							 '0.0145': 56, \
							 '0.015' : 33}\
						} , \
#					'1.0' : {'0.014' : 10, \
#							 '0.0145': 15, \
#							 '0.015' : 33}\
		  
		'long_swap' : {
					'0.85': {'0.014' : 500, \
							 '0.0145': 500, \
							 '0.015' : 500, \
							 '0.0155': 500, \
							 '0.016' : 500}, \
					'0.9': {'0.014' : 1200, \
							 '0.0145': 1200, \
							 '0.015' : 1200, \
							 '0.0155': 1200, \
							 '0.016' : 1200}, \
					'0.95': {'0.014' : 20, \
							 '0.0145': 300, \
							 '0.015' : 500, \
							 '0.0155': 750, \
							 '0.016' : 950}, \
					'1.0' : {'0.014' : 385, \
							 '0.0145': 300}\
					}\
			}
	slurm_time_units = 1
	
	Temp_grid, phi_grid = np.meshgrid(phi_s, Temp_s)
	times = {}
	times_thr = {}
	n_opt = {}
	for MCmode in time_data:
		times[MCmode] = {}
		times_thr[MCmode] = {}
		n_opt[MCmode] = {}
		for Temp in time_data[MCmode]:
			times[MCmode][Temp] = {}
			times_thr[MCmode][Temp] = {}
			n_opt[MCmode][Temp] = {}
			for phi1 in time_data[MCmode][Temp]:
				time_data[MCmode][Temp][phi1] = np.array(time_data[MCmode][Temp][phi1])
				times[MCmode][Temp][phi1] = my.get_average(time_data[MCmode][Temp][phi1])
				times_thr[MCmode][Temp][phi1] = times[MCmode][Temp][phi1][0] + times[MCmode][Temp][phi1][1] * thr_std * np.sqrt(len(time_data[MCmode][Temp][phi1]) - 1) * np.sqrt(times[MCmode][Temp][phi1][0] / slurm_time)
				n_opt[MCmode][Temp][phi1] = np.intc(slurm_time  * slurm_time_units / times_thr[MCmode][Temp][phi1] * n_base[MCmode][Temp][phi1])
	
	print('times:')
	print(times)
	print('time_thr:')
	print(times_thr)
	print('n_%d h:' % slurm_time)
	print(n_opt)
	
	# times, d_times = my.get_average(times_data, axis=2)
	# print(times.shape, times_data.shape)
	# print(Temp_grid.shape, phi_grid.shape)
	
	# times_std = d_times * np.sqrt(times_data.shape[2] - 1)
	# times_thr = times + times_std * thr_std
	# print('times:')
	# print(times)
	# print(times_std)
	# print('time_thr:')
	# print(times_thr)
	# print('Nffs for %s h:' % my.f2s(slurm_time))
	# print(np.intc(slurm_time  * slurm_time_units / times_thr * n_base))
	
	# fig, ax, _ = my.get_fig('$T$', '$\phi_1$', projection='3d')
	# # surf = ax.plot_surface(phi_grid.T, Temp_grid.T, times.T,
						# # linewidth=0, cmap=cm.coolwarm)
	# # fig.colorbar(surf, shrink=0.5, aspect=5)
	# inds = times.flatten() > 0
	# ax.errorbar(phi_grid.flatten()[inds], Temp_grid.flatten()[inds], times.flatten()[inds], zerr=times_std.flatten()[inds], fmt='.')
	
	# plt.show()


def avg_times_Dtop(thr_std=6, slurm_time=144):
	Temp_s = np.array([0.8, 0.85, 0.9, 0.95, 1.0])
	phi_s = np.array([14, 14.5, 15, 15.5, 16]) / 1000
	
	'''
		str substitutions
		
		{
			-
			 + (1/60) * (
		}
		and
		{
			\n
			)), 
		}
		and
		{
			.
			*24 + 
		}
		=======
		{
			)), )), 
			\n
		}
		{
			\n
			))\n
		}
		{
			(0
			(
		}
	'''
	
	time_data = {\
			'swap'    : {\
					'0.85': {'0.014' : [0 + (1/60) * (39 + (1/60) * (42)), 0 + (1/60) * (32 + (1/60) * (46)), 0 + (1/60) * (28 + (1/60) * (10)), 0 + (1/60) * (15 + (1/60) * (59)), 0 + (1/60) * (17 + (1/60) * (53)), 0 + (1/60) * (21 + (1/60) * (13))], \
							 '0.0145': [0 + (1/60) * (50 + (1/60) * (41)), 0 + (1/60) * (45 + (1/60) * (5)), 0 + (1/60) * (42 + (1/60) * (11)), 0 + (1/60) * (39 + (1/60) * (41)), 0 + (1/60) * (33 + (1/60) * (53)), 0 + (1/60) * (36 + (1/60) * (8))], \
							 '0.015' : [0 + (1/60) * (51 + (1/60) * (51)), 0 + (1/60) * (37 + (1/60) * (22)), 0 + (1/60) * (45 + (1/60) * (31)), 0 + (1/60) * (34 + (1/60) * (48)), 0 + (1/60) * (29 + (1/60) * (52)), 0 + (1/60) * (24 + (1/60) * (37))], \
							 '0.0155': [0 + (1/60) * (48 + (1/60) * (31)), 0 + (1/60) * (47 + (1/60) * (7)), 0 + (1/60) * (47 + (1/60) * (44)), 0 + (1/60) * (37 + (1/60) * (37)), 0 + (1/60) * (40 + (1/60) * (5)), 0 + (1/60) * (14 + (1/60) * (46))], \
							 '0.016' : [0 + (1/60) * (59 + (1/60) * (10)), 0 + (1/60) * (54 + (1/60) * (54)), 0 + (1/60) * (52 + (1/60) * (5)), 0 + (1/60) * (46 + (1/60) * (59)), 0 + (1/60) * (51 + (1/60) * (54)), 0 + (1/60) * (45 + (1/60) * (40))]}, \
					'0.9': {'0.014' : [0 + (1/60) * (22 + (1/60) * (41)), 0 + (1/60) * (21 + (1/60) * (31)), 0 + (1/60) * (16 + (1/60) * (22)), 0 + (1/60) * (10 + (1/60) * (10)), 0 + (1/60) * (8 + (1/60) * (41)), 0 + (1/60) * (13 + (1/60) * (18))], \
							 '0.0145': [0 + (1/60) * (15 + (1/60) * (18)), 0 + (1/60) * (14 + (1/60) * (50)), 0 + (1/60) * (12 + (1/60) * (27)), 0 + (1/60) * (12 + (1/60) * (19)), 0 + (1/60) * (13 + (1/60) * (55)), 0 + (1/60) * (13 + (1/60) * (0))], \
							 '0.015' : [0 + (1/60) * (39 + (1/60) * (49)), 0 + (1/60) * (20 + (1/60) * (11)), 0 + (1/60) * (16 + (1/60) * (28)), 0 + (1/60) * (10 + (1/60) * (18)), 0 + (1/60) * (16 + (1/60) * (34)), 0 + (1/60) * (8 + (1/60) * (7))], \
							 '0.0155': [0 + (1/60) * (20 + (1/60) * (16)), 0 + (1/60) * (11 + (1/60) * (53)), 0 + (1/60) * (17 + (1/60) * (48)), 0 + (1/60) * (6 + (1/60) * (21)), 0 + (1/60) * (4 + (1/60) * (57)), 0 + (1/60) * (3 + (1/60) * (6))], \
							 '0.016' : [0 + (1/60) * (23 + (1/60) * (13)), 0 + (1/60) * (21 + (1/60) * (39)), 0 + (1/60) * (20 + (1/60) * (40)), 0 + (1/60) * (16 + (1/60) * (8)), 0 + (1/60) * (15 + (1/60) * (1)), 0 + (1/60) * (7 + (1/60) * (6))]}, \
					'0.95': {'0.014' : [0 + (1/60) * (31 + (1/60) * (57)), 0 + (1/60) * (25 + (1/60) * (2)), 0 + (1/60) * (23 + (1/60) * (45)), 0 + (1/60) * (19 + (1/60) * (51)), 0 + (1/60) * (15 + (1/60) * (5)), 0 + (1/60) * (18 + (1/60) * (17))], \
							 '0.0145': [0 + (1/60) * (25 + (1/60) * (23)), 0 + (1/60) * (21 + (1/60) * (10)), 0 + (1/60) * (28 + (1/60) * (26)), 0 + (1/60) * (18 + (1/60) * (47)), 0 + (1/60) * (15 + (1/60) * (25)), 0 + (1/60) * (17 + (1/60) * (16))], \
							 '0.015' : [0 + (1/60) * (59 + (1/60) * (12)), 0 + (1/60) * (24 + (1/60) * (11)), 0 + (1/60) * (25 + (1/60) * (37)), 0 + (1/60) * (23 + (1/60) * (36)), 0 + (1/60) * (20 + (1/60) * (34)), 0 + (1/60) * (26 + (1/60) * (14))], \
							 '0.0155': [0 + (1/60) * (23 + (1/60) * (43)), 0 + (1/60) * (21 + (1/60) * (42)), 0 + (1/60) * (19 + (1/60) * (53)), 0 + (1/60) * (19 + (1/60) * (55)), 0 + (1/60) * (15 + (1/60) * (34)), 0 + (1/60) * (16 + (1/60) * (42))], \
							 '0.016' : [0 + (1/60) * (59 + (1/60) * (57)), 0 + (1/60) * (36 + (1/60) * (50)), 0 + (1/60) * (24 + (1/60) * (14)), 0 + (1/60) * (27 + (1/60) * (14)), 0 + (1/60) * (20 + (1/60) * (19)), 0 + (1/60) * (18 + (1/60) * (59))]}, \
					'1.0' : {'0.014' : [0 + (1/60) * (29 + (1/60) * (31)), 0 + (1/60) * (16 + (1/60) * (58)), 0 + (1/60) * (3 + (1/60) * (44)), 0 + (1/60) * (2 + (1/60) * (33)), 0 + (1/60) * (3 + (1/60) * (17))], \
							 '0.0145' : [4 + (1/60) * (30 + (1/60) * (3)), 3 + (1/60) * (20 + (1/60) * (2)), 3 + (1/60) * (13 + (1/60) * (6)), 3 + (1/60) * (3 + (1/60) * (52)), 2 + (1/60) * (28 + (1/60) * (2)), 2 + (1/60) * (13 + (1/60) * (34))], \
							 '0.015' : [6 + (1/60) * (20 + (1/60) * (31)), 5 + (1/60) * (22 + (1/60) * (44)), 3 + (1/60) * (41 + (1/60) * (11)), 2 + (1/60) * (55 + (1/60) * (52)), 2 + (1/60) * (21 + (1/60) * (50)), 0 + (1/60) * (55 + (1/60) * (16))], \
							 '0.0155': [2 + (1/60) * (9 + (1/60) * (40)), 2 + (1/60) * (6 + (1/60) * (57)), 1 + (1/60) * (49 + (1/60) * (51)), 1 + (1/60) * (8 + (1/60) * (11)), 0 + (1/60) * (26 + (1/60) * (7)), 0 + (1/60) * (22 + (1/60) * (53))], \
							 '0.016' : [0 + (1/60) * (37 + (1/60) * (52)), 0 + (1/60) * (41 + (1/60) * (35)), 0 + (1/60) * (18 + (1/60) * (0)), 0 + (1/60) * (17 + (1/60) * (39)), 0 + (1/60) * (10 + (1/60) * (5)), 0 + (1/60) * (10 + (1/60) * (0))]}\
							} , \
		
		  'long_swap' : {\
					'0.85': {'0.014' : [0 + (1/60) * (44 + (1/60) * (13)), 0 + (1/60) * (44 + (1/60) * (3)), 0 + (1/60) * (45 + (1/60) * (33)), 0 + (1/60) * (40 + (1/60) * (9)), 0 + (1/60) * (41 + (1/60) * (18)), 0 + (1/60) * (48 + (1/60) * (20))], \
							 '0.0145': [0 + (1/60) * (36 + (1/60) * (49)), 0 + (1/60) * (35 + (1/60) * (32)), 0 + (1/60) * (36 + (1/60) * (45)), 0 + (1/60) * (34 + (1/60) * (16)), 0 + (1/60) * (36 + (1/60) * (35)), 0 + (1/60) * (36 + (1/60) * (42))], \
							 '0.015' : [0 + (1/60) * (36 + (1/60) * (33)), 0 + (1/60) * (39 + (1/60) * (52)), 0 + (1/60) * (36 + (1/60) * (54)), 0 + (1/60) * (39 + (1/60) * (45)), 0 + (1/60) * (39 + (1/60) * (24)), 0 + (1/60) * (23 + (1/60) * (27))], \
							 '0.0155': [0 + (1/60) * (20 + (1/60) * (38)), 0 + (1/60) * (42 + (1/60) * (19)), 0 + (1/60) * (39 + (1/60) * (49)), 0 + (1/60) * (38 + (1/60) * (12)), 0 + (1/60) * (40 + (1/60) * (15)), 0 + (1/60) * (38 + (1/60) * (38))], \
							 '0.016' : [0 + (1/60) * (41 + (1/60) * (30)), 0 + (1/60) * (39 + (1/60) * (28)), 0 + (1/60) * (36 + (1/60) * (13)), 0 + (1/60) * (39 + (1/60) * (8)), 0 + (1/60) * (37 + (1/60) * (26)), 0 + (1/60) * (39 + (1/60) * (11))]}, \
					'0.9': {'0.014' : [2 + (1/60) * (5 + (1/60) * (8)), 0 + (1/60) * (56 + (1/60) * (21)), 0 + (1/60) * (53 + (1/60) * (21)), 0 + (1/60) * (38 + (1/60) * (20)), 0 + (1/60) * (59 + (1/60) * (31)), 0 + (1/60) * (54 + (1/60) * (56))], \
							 '0.0145': [1 + (1/60) * (15 + (1/60) * (6)), 1 + (1/60) * (14 + (1/60) * (9)), 1 + (1/60) * (17 + (1/60) * (24)), 0 + (1/60) * (56 + (1/60) * (43)), 1 + (1/60) * (20 + (1/60) * (29)), 0 + (1/60) * (51 + (1/60) * (7))], \
							 '0.015' : [1 + (1/60) * (4 + (1/60) * (27)), 1 + (1/60) * (15 + (1/60) * (5)), 1 + (1/60) * (20 + (1/60) * (42)), 1 + (1/60) * (7 + (1/60) * (18)), 1 + (1/60) * (10 + (1/60) * (47)), 1 + (1/60) * (10 + (1/60) * (5))], \
							 '0.0155': [1 + (1/60) * (30 + (1/60) * (34)), 1 + (1/60) * (20 + (1/60) * (12)), 0 + (1/60) * (57 + (1/60) * (0)), 0 + (1/60) * (40 + (1/60) * (6)), 1 + (1/60) * (9 + (1/60) * (28)), 1 + (1/60) * (28 + (1/60) * (44))], \
							 '0.016' : [1 + (1/60) * (25 + (1/60) * (24)), 1 + (1/60) * (15 + (1/60) * (38)), 1 + (1/60) * (1 + (1/60) * (58)), 0 + (1/60) * (53 + (1/60) * (9)), 1 + (1/60) * (10 + (1/60) * (48)), 1 + (1/60) * (28 + (1/60) * (52))]}, \
					'0.95': {'0.014' : [1 + (1/60) * (7 + (1/60) * (1)), 1 + (1/60) * (11 + (1/60) * (13)), 1 + (1/60) * (8 + (1/60) * (39)), 1 + (1/60) * (6 + (1/60) * (19)), 1 + (1/60) * (8 + (1/60) * (6)), 0 + (1/60) * (40 + (1/60) * (30))], \
							 '0.0145': [1 + (1/60) * (4 + (1/60) * (19)), 0 + (1/60) * (40 + (1/60) * (21)), 1 + (1/60) * (4 + (1/60) * (29)), 1 + (1/60) * (2 + (1/60) * (10)), 0 + (1/60) * (43 + (1/60) * (3)), 0 + (1/60) * (43 + (1/60) * (27))], \
							 '0.015' : [1 + (1/60) * (0 + (1/60) * (57)), 1 + (1/60) * (2 + (1/60) * (48)), 0 + (1/60) * (59 + (1/60) * (24)), 0 + (1/60) * (55 + (1/60) * (45)), 0 + (1/60) * (59 + (1/60) * (52)), 1 + (1/60) * (5 + (1/60) * (42))], \
							 '0.0155': [1 + (1/60) * (16 + (1/60) * (51)), 0 + (1/60) * (35 + (1/60) * (43)), 0 + (1/60) * (55 + (1/60) * (53)), 1 + (1/60) * (12 + (1/60) * (8)), 1 + (1/60) * (15 + (1/60) * (3)), 1 + (1/60) * (12 + (1/60) * (20))], \
							 '0.016' : [1 + (1/60) * (23 + (1/60) * (17)), 1 + (1/60) * (26 + (1/60) * (28)), 1 + (1/60) * (31 + (1/60) * (59)), 1 + (1/60) * (29 + (1/60) * (38)), 1 + (1/60) * (24 + (1/60) * (6)), 1 + (1/60) * (25 + (1/60) * (23))]}, \
					'1.0' : {'0.014' : [0 + (1/60) * (18 + (1/60) * (29)), 0 + (1/60) * (17 + (1/60) * (46)), 0 + (1/60) * (18 + (1/60) * (44)), 0 + (1/60) * (17 + (1/60) * (25)), 0 + (1/60) * (18 + (1/60) * (21)), 0 + (1/60) * (18 + (1/60) * (9))], \
							 '0.015': [4 + (1/60) * (45 + (1/60) * (14)), 4 + (1/60) * (6 + (1/60) * (9)), 4 + (1/60) * (33 + (1/60) * (48)), 4 + (1/60) * (16 + (1/60) * (57)), 4 + (1/60) * (12 + (1/60) * (55)), 3 + (1/60) * (36 + (1/60) * (4))], \
							 '0.0155': [2 + (1/60) * (35 + (1/60) * (2)), 2 + (1/60) * (17 + (1/60) * (2)), 2 + (1/60) * (33 + (1/60) * (12)), 2 + (1/60) * (37 + (1/60) * (19)), 1 + (1/60) * (35 + (1/60) * (3)), 1 + (1/60) * (47 + (1/60) * (40))], \
							 '0.016' : [1 + (1/60) * (54 + (1/60) * (20)), 1 + (1/60) * (52 + (1/60) * (54)), 2 + (1/60) * (9 + (1/60) * (38)), 2 + (1/60) * (9 + (1/60) * (30)), 2 + (1/60) * (22 + (1/60) * (11)), 1 + (1/60) * (19 + (1/60) * (3))]}\
						}\
				}
	
	n_base = {\
		'swap'      : {
					'0.85': {'0.014' : 360, \
							 '0.0145': 440, \
							 '0.015' : 460, \
							 '0.0155': 500, \
							 '0.016' : 520}, \
					'0.9': {'0.014' : 230, \
							 '0.0145': 250, \
							 '0.015' : 270, \
							 '0.0155': 280, \
							 '0.016' : 310}, \
					'0.95': {'0.014' : 370, \
							 '0.0145': 390, \
							 '0.015' : 520, \
							 '0.0155': 560, \
							 '0.016' : 530}, \
					'1.0' : {'0.014' : 50, \
							 '0.0145': 90, \
							 '0.015' : 120, \
							 '0.0155' : 190, \
							 '0.016' : 210}\
						} , \
				
				
		'long_swap' : {
					'0.85': {'0.014' : 11060, \
							 '0.0145': 10660, \
							 '0.015' : 11830, \
							 '0.0155': 12800, \
							 '0.016' : 13160}, \
					'0.9': {'0.014' : 12000, \
							 '0.0145': 12000, \
							 '0.015' : 12000, \
							 '0.0155': 12000, \
							 '0.016' : 12000}, \
					'0.95': {'0.014' : 10580, \
							 '0.0145': 14270, \
							 '0.015' : 13160, \
							 '0.0155': 12770, \
							 '0.016' : 15430}, \
					'1.0' : {'0.014' : 2351, \
							 '0.015' : 5000, \
							 '0.0155' : 7500, \
							 '0.016' : 9500}\
					}\
			}
	slurm_time_units = 1
	
	Temp_grid, phi_grid = np.meshgrid(phi_s, Temp_s)
	times = {}
	times_thr = {}
	n_opt = {}
	for MCmode in time_data:
		times[MCmode] = {}
		times_thr[MCmode] = {}
		n_opt[MCmode] = {}
		for Temp in time_data[MCmode]:
			times[MCmode][Temp] = {}
			times_thr[MCmode][Temp] = {}
			n_opt[MCmode][Temp] = {}
			for phi1 in time_data[MCmode][Temp]:
				time_data[MCmode][Temp][phi1] = np.array(time_data[MCmode][Temp][phi1])
				times[MCmode][Temp][phi1] = my.get_average(time_data[MCmode][Temp][phi1])
				times_thr[MCmode][Temp][phi1] = times[MCmode][Temp][phi1][0] + times[MCmode][Temp][phi1][1] * thr_std * np.sqrt(len(time_data[MCmode][Temp][phi1]) - 1) * np.sqrt(times[MCmode][Temp][phi1][0] / slurm_time)
				n_opt[MCmode][Temp][phi1] = np.intc(slurm_time  * slurm_time_units / times_thr[MCmode][Temp][phi1] * n_base[MCmode][Temp][phi1])
	
	print('times:')
	print(times)
	print('time_thr:')
	print(times_thr)
	print('n_%d h:' % slurm_time)
	print(n_opt)

def proc_fit(x, y, d_y, clr, ylbl=None, d_x=None, to_plot=True, xlbl=r'$\mu_1$', n_draw=100, fig=None, ax=None, lbl='data', fit_lbl=lambda fit2: 'quad_fit', order=2):
	fit2 = np.polyfit(x, y, order, w=(1/d_y) if(d_y is not None) else np.ones(y.shape))
	
	if(to_plot):
		if(ax is None):
			fig, ax, _ = my.get_fig(xlbl, ylbl)
		x_draw = np.linspace(min(x), max(x), n_draw)
		
		errorbar_kwargs = {'fmt' : '.', 'label' : lbl, 'color' : clr}
		if(d_y is not None):
			errorbar_kwargs['yerr'] = d_y
		if(d_x is not None):
			errorbar_kwargs['xerr'] = d_x
		#ax.errorbar(x, y, yerr=d_y, fmt='.', label=lbl, color=clr)
		ax.errorbar(x, y, **errorbar_kwargs)
		ax.plot(x_draw, np.polyval(fit2 , x_draw), label=fit_lbl(fit2), color=clr)
		
		my.add_legend(fig, ax)
	
	return fit2, fig, ax

def get_mu0(x, y, y_ref, fit2):
	mu0_opt = scipy.optimize.root_scalar(lambda xx, fit2=fit2: (np.polyval(fit2, xx) - y_ref), \
										x0=x[np.argmin(np.abs(y - y_ref))], \
										fprime=lambda xx, fit2_prime=np.polyder(fit2): np.polyval(fit2_prime, xx))
	return mu0_opt.root

def fit_Ns(phi1_s, Ns, d_Ns=None, d_phi1_s=None, L=320, \
			bounds_mult=1.5, mode='dy', \
			lnNs_fitFnc = lambda x, prm: prm[1] - 2 * np.log(x - prm[0]), \
			lnPhi1_fitFnc = lambda y, prm: np.exp((prm[1] - y) / 2) + prm[0]):
	x = np.log(phi1_s)
	y = np.log(Ns)
	d_y = (1 / np.sqrt(Ns)) if(d_Ns is None) else (d_Ns / Ns)
	d_x = (1 / np.sqrt(phi1_s * L**2)) if(d_phi1_s is None) else (d_phi1_s / phi1_s)
	lnNs_fit_prm0 = np.empty(2)
	lnNs_fit_prm0[0] = (x[0] * np.exp((y[0] - y[-1]) / 2) - x[-1]) / (np.exp((y[0] - y[-1]) / 2) - 1)
	lnNs_fit_prm0[1] = y[0] + 2 * np.log(x[0] - lnNs_fit_prm0[0])
	lnNs_opt = scipy.optimize.minimize(lambda prm: np.sum(((lnNs_fitFnc(x, prm) - y) / d_y)**2) * ('dy' in mode) + np.sum(((lnPhi1_fitFnc(y, prm) - x) / d_x)**2) * ('dx' in mode), \
									lnNs_fit_prm0, method='SLSQP', \
									bounds=((lnNs_fit_prm0[0] - np.log(bounds_mult), lnNs_fit_prm0[0] + np.log(bounds_mult)), \
										   (lnNs_fit_prm0[1] - np.log(bounds_mult**2), lnNs_fit_prm0[1] + np.log(bounds_mult**2))))
	
	rho_c = np.exp(lnNs_opt.x[0])
	sgmT = np.sqrt(np.exp(lnNs_opt.x[1]) / np.pi)
	
	return rho_c, sgmT, lnNs_opt, lnNs_fitFnc

def mu1_phi1_interp():
	mu2 = np.array([4.92238326, 1e4])
	mu1 = [np.array([5.1, 5.125, 5.15, 5.175, 5.2]), \
			np.array([5.025, 5.05, 5.075, 5.1, 5.125, 5.15, 5.175, 5.2])]
	
	# ======= phi2=0.0 (mu2=1e4) ===========
	phi1 = [np.array([1.39e-2, 1.2e-2, 1.1e-2, 1.02e-2, 0.97e-2]), \
			np.array([0.01565, 0.01405, 0.01158, 0.0101, 0.009637, 0.009379, 0.008799, 0.008304])]
	d_phi1 = [np.array([0.05e-2, 0.05e-2, 0.03e-2, 0.03e-2, 0.03e-2]), \
			np.array([0.0003, 0.0003, 0.0003, 0.0003, 0.0002, 0.0002, 0.0001, 0.00014])]
	dF = [np.array([1.41, 2.03, 3.15, 4.326, 6.344]), \
		np.array([-0.0690407, 0.79863, 1.14676, 2.04316, 3.365314, 4.19758, 5.868074, 8.200319])]
	d_dF = [np.array([0.09, 0.1, 0.1, 0.1, 0.08]), \
		np.array([0.04048, 0.08102, 0.1194, 0.11894, 0.09664, 0.14713, 0.06713, 0.1743])]
	Ns = [np.array([38.73, 43.56, 60.85705, 66.5, 84.8]), \
		np.array([29.52248, 32.3859, 37.46289, 42.45807, 51.97981, 57.9825, 73.98546, 100.1522])]
	d_Ns = [np.array([0.4, 0.2, 0.3, 0.5, 0.7]), \
		np.array([0.2545, 1.0597, 0.8923, 0.2842, 0.4219, 1.791, 1.401, 1.5134])]
	
	N_mu2 = len(mu2)
	
	rho_c = np.empty(N_mu2)
	sgmT = np.empty(N_mu2)
	lnNs_opts = []
	lnNs_fitFnc = []
	for i2 in range(N_mu2):
		rho_c[i2], sgmT[i2], lnNs_opt_new, lnNs_fitFnc_new = \
			fit_Ns(phi1[i2], Ns[i2], d_Ns[i2], bounds_mult=2, mode='dx')
		lnNs_opts.append(lnNs_opt_new)
		lnNs_fitFnc.append(lnNs_fitFnc_new)
	
	sgm_th_izing = lambda e: (e/2 + np.log(np.tanh(e/4)) + np.sqrt(2) * np.log(np.sinh(e/2))) / (2 * (1 - np.sinh(e/2)**(-4))**(1.0/16))
	# fig, ax, _ = my.get_fig('T/J = 4T/e = 1/K', r'$\sigma / J$')
	# e_draw = np.linspace(2,8,100)
	# ax.plot(4/e_draw, sgm_th(e_draw) / (e_draw/4))
	# plt.show()
	
	fig_phi1, ax_phi1, _ = my.get_fig(r'$\mu_1$', r'$\phi_{1,bulk}$')
	fig_dF, ax_dF, _ = my.get_fig(r'$\mu_1$', r'$\Delta F/T$')
	fig_Ns, ax_Ns, _ = my.get_fig(r'$\mu_1$', r'$N^*$')
	fig_S, ax_S, _ = my.get_fig(r'$-e_{11} z/2 + \mu_1$', r'$\ln(\rho_1)$')
	fig_phiN, ax_phiN, _ = my.get_fig(r'$\phi_1$', r'$N^*$')#, xscl='log', yscl='log'
	
	e11 = -2.68010292
	for i2 in range(N_mu2):
		h = -e11 - mu1[i2]/2
		Ns_th = np.pi * (sgm_th_izing(-e11) / (2 * h))**2
		
		clr_id = 3 * i2
		lbl = r'$\mu_2 = %s$' % my.f2s(mu2[i2])
		
		phi1_fit2, _, _  = \
			proc_fit(mu1[i2], phi1[i2], d_phi1[i2], fig=fig_phi1, ax=ax_phi1, \
					lbl=lbl, clr=my.get_my_color(1 + clr_id), to_plot=True)
		dF_fit2, _, _  = \
			proc_fit(mu1[i2], dF[i2], d_dF[i2], fig=fig_dF, ax=ax_dF, \
					lbl=lbl, clr=my.get_my_color(1 + clr_id), to_plot=True)
		Ns_fit2, _, _ = \
			proc_fit(mu1[i2], Ns[i2], d_Ns[i2], fig=fig_Ns, ax=ax_Ns, \
					lbl=lbl, clr=my.get_my_color(1 + clr_id), to_plot=True)
		S_fit, _, _ = \
					proc_fit(2 * h, np.log(phi1[i2]), d_phi1[i2]/phi1[i2], order=1, \
					fig=fig_S, ax=ax_S, lbl=lbl, \
					fit_lbl=lambda fit: (r'$\rho_c = %s$, $k = %s$' % (my.f2s(np.exp(fit[1])), my.f2s(fit[0]))), \
					clr=my.get_my_color(1 + clr_id), to_plot=True)
		rho_c_linfit = np.exp(S_fit[1])
		
		ax_Ns.plot(mu1[i2], Ns_th, label='CNT', color=my.get_my_color(0))
		
		phi1_draw = np.linspace(min(phi1[i2]), max(phi1[i2]), 100)
		ax_phiN.errorbar(phi1[i2], Ns[i2], yerr=d_Ns[i2], xerr=d_phi1[i2], fmt='.', label=lbl, color=my.get_my_color(1 + clr_id))
		ax_phiN.plot(phi1_draw, np.exp(lnNs_fitFnc[i2](np.log(phi1_draw), lnNs_opts[i2].x)), label=r'$\phi_c = %s$' % (my.f2s(rho_c[i2])), color=my.get_my_color(1 + clr_id))
		
		mu0 = get_mu0(mu1[i2], dF[i2], 3, dF_fit2)
		#mu0 = get_mu0(mu, Ns, 35, Ns_fit2)
		
		Ns_0 = np.polyval(Ns_fit2, mu0)
		phi1_0 = np.polyval(phi1_fit2, mu0)
		dF0 = np.polyval(dF_fit2, mu0)
		
		ax_dF.plot([min(mu1[i2]), mu0], [dF0] * 2, '--', label=r'$\Delta F_0 / T = %s$' % my.f2s(dF0), color=my.get_my_color(1 + clr_id))
		ax_dF.plot([mu0] * 2, [min(dF[i2]), dF0], '--', label=r'$\mu_{1-0} = %s$' % my.f2s(mu0, n=4), color=my.get_my_color(1 + clr_id))
		ax_Ns.plot([min(mu1[i2]), mu0], [Ns_0] * 2, '--', label=r'$N^*_0 = %s$' % my.f2s(Ns_0), color=my.get_my_color(1 + clr_id))
		ax_Ns.plot([mu0] * 2, [min(Ns[i2]), Ns_0], '--', label=r'$\mu_{1-0} = %s$' % my.f2s(mu0, n=4), color=my.get_my_color(1 + clr_id))
		ax_phi1.plot([min(mu1[i2]), mu0], [phi1_0] * 2, '--', label=r'$\phi_{1,0} = %s$' % my.f2s(phi1_0, n=5), color=my.get_my_color(1 + clr_id))
		ax_phi1.plot([mu0] * 2, [min(phi1[i2]), phi1_0], '--', label=r'$\mu_{1-0} = %s$' % my.f2s(mu0, n=4), color=my.get_my_color(1 + clr_id))
	
	my.add_legend(fig_dF, ax_dF)
	my.add_legend(fig_phi1, ax_phi1)
	my.add_legend(fig_Ns, ax_Ns)
	my.add_legend(fig_phiN, ax_phiN)
	
	
	plt.show()

def supersat(verbose=1, to_plot=True):
	phi1_s = np.array([0.011, 0.01105, 0.0111, 0.01115, 0.0112, 0.01125, 0.0113, 0.01135, 0.0114, 0.01145, 0.0115, 0.01155, 0.0116, 0.01165, 0.0117, 0.01175, 0.0118, 0.01185, 0.0119, 0.01195, 0.012, 0.01205, 0.0121, 0.01215, 0.0122, 0.01225])
	ID_s = [np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int)]
	
	'''
	phi1_s = np.array([0.0121, 0.0119, 0.0117, 0.01145, 0.0112, 0.0111])
	ID_s = [np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int), \
			np.array([1000, 1001, 1002, 1003], dtype=int)]
	'''
	
	N_models = len(phi1_s)
	assert(len(ID_s) == N_models)
	
	OPset_name = 'nvt21'
	phi2 = 0.01
	nFFS_init = 60
	nFFS = 30
	
	OP_interfaces = table_data.OP_interfaces_table[OPset_name]
	
	def no_empty_split_cmd(cmd, spr=' '):
		return list(filter(None, my.run_it(cmd, check=True, verbose=False).split(spr)))
		#list(filter(None, s.split(spr)))
	def log_interval_parse(res):
		if(len(res[4].split(')')) > 1):
			y_scale = float(res[4].split(')')[1])
			y = float(res[2][1:]) * y_scale
			d_y = float(res[4].split(')')[0]) * y_scale
			return np.log(y), np.log((y + d_y) / (y - d_y)) / 2
		else:
			y_scale = float(res[3].split(']')[1])
			y_min = float(res[2][1:-1]) * y_scale
			y_max = float(res[3].split(']')[0]) * y_scale
			return np.log(y_min * y_max) / 2, np.log(y_max / y_min) / 2
	
	ln_flux0 = np.empty((2, N_models))
	ln_kAB = np.empty((2, N_models))
	Ns = np.empty((2, N_models))
	ZeldovichG = np.empty((2, N_models))
	Dtop = np.empty((2, N_models))
	dF = np.empty((2, N_models))
	dip = np.empty((2, N_models))
	Dtop_OP0_match = np.empty((2, N_models))
	for i in range(N_models):
		res = my.run_it('python run.py -mode FFS_AB_many -L 320 -OP_interfaces_set_IDs %s -to_get_timeevol 0 -N_states_FFS %d -N_init_states_FFS %d -init_composition %s %s %s -e -2.68010292 -1.34005146 -1.71526587 -MC_move_mode long_swap -to_recomp 0 -Dtop_Nruns 300 -my_seeds %s -to_show_on_screen 0 -to_plot 0' % \
					(OPset_name, nFFS, nFFS_init, my.f2s(1 - phi2 - phi1_s[i], n=5), my.f2s(phi1_s[i], n=5), my.f2s(phi2, n=5), ' '.join([str(j) for j in ID_s[i]])), \
					check=True)
		if(verbose > 0):
			print(res)
		
		res_flux0 = no_empty_split_cmd(r'echo "%s" | grep flux0_AB' % res)
		if(verbose > 1):
			print(res_flux0)
		ln_flux0[0, i], ln_flux0[1, i] = log_interval_parse(res_flux0)
		if(verbose > 0):
			print('ln_flux0 =', ln_flux0[0, i], '+-', ln_flux0[1, i])
		
		res_kAB = no_empty_split_cmd(r'echo "%s" | grep k_AB_FFS' % res)
		if(verbose > 1):
			print(res_kAB)
		ln_kAB[0, i], ln_kAB[1, i] = log_interval_parse(res_kAB)
		if(verbose > 0):
			print('ln_kAB =', ln_kAB[0, i], '+-', ln_kAB[1, i])
		
		res_Ns = no_empty_split_cmd(r'echo "%s" | grep "N\* ="' % res)
		if(verbose > 1):
			print(res_Ns)
		Ns[0, i] = float(res_Ns[2])
		Ns[1, i] = float(res_Ns[4])
		if(verbose > 0):
			print('Ns =', Ns[0, i], '+-', Ns[1, i])
		
		res_ZeldovichG = no_empty_split_cmd(r'echo "%s" | grep "ZeldovichG ="' % res)
		if(verbose > 1):
			print(res_ZeldovichG)
		ZeldovichG[0, i] = float(res_ZeldovichG[2])
		ZeldovichG[1, i] = float(res_ZeldovichG[4])
		if(verbose > 0):
			print('ZeldovichG =', ZeldovichG[0, i], '+-', ZeldovichG[1, i])
		
		res_Dtop = no_empty_split_cmd(r'echo "%s" | grep "Dtop ="' % res)
		if(verbose > 1):
			print(res_Dtop)
		Dtop[0, i] = float(res_Dtop[2])
		Dtop[1, i] = float(res_Dtop[4])
		if(verbose > 0):
			print('Dtop =', Dtop[0, i], '+-', Dtop[1, i])
		
		res_dF = no_empty_split_cmd(r'echo "%s" | grep "dF/T ="' % res)
		if(verbose > 1):
			print(res_dF)
		dF[0, i] = float(res_dF[2])
		dF[1, i] = float(res_dF[4])
		if(verbose > 0):
			print('dF =', dF[0, i], '+-', dF[1, i])
		
		res_dip = no_empty_split_cmd(r'echo "%s" | grep "rho_dip ="' % res)
		if(verbose > 1):
			print(res_dip)
		dip[0, i] = float(res_dip[2])
		dip[1, i] = float(res_dip[4])
		if(verbose > 0):
			print('dip =', dip[0, i], '+-', dip[1, i])
		
		#input('ok')
		
		Dtop_OP0_match[0, i] = OP_interfaces[np.argmin(np.abs(OP_interfaces - Ns[0, i]))] - Ns[0, i]
		Dtop_OP0_match[1, i] = Ns[1, i]
	
	closeOP0_inds = np.abs(Dtop_OP0_match[0, :]) < 100.0
	
	rho_c, sgmT, lnNs_opt, lnNs_fitFnc = \
		fit_Ns(phi1_s[closeOP0_inds], Ns[0, closeOP0_inds], Ns[1, closeOP0_inds], bounds_mult=1.5, mode='dy')
	
	slp_phi1s = (np.log(phi1_s[closeOP0_inds][:-1]) + np.log(phi1_s[closeOP0_inds][1:])) / 2
	slp = np.diff(np.log(Ns[0, closeOP0_inds])) / np.diff(np.log(phi1_s[closeOP0_inds]))
	d_slp = np.sqrt((Ns[1, closeOP0_inds][:-1] / Ns[0, closeOP0_inds][:-1])**2 + (Ns[1, closeOP0_inds][1:] / Ns[0, closeOP0_inds][1:])**2) / np.diff(np.log(phi1_s[closeOP0_inds]))
	
	if(to_plot):
		fig_extrapol, ax_extrapol, _ = my.get_fig(r'$\phi_{bulk}$', r'$N^*$')
		fig_dF, ax_dF, _ = my.get_fig(r'$\phi_{bulk}$', r'$\Delta F/T$')
		fig_OP0match, ax_OP0match, _ = my.get_fig(r'$\phi_{bulk}$', r'$N_{cl,closest} - N^*$')
		#fig_NsSlp, ax_NsSlp, _ = my.get_fig(r'$\ln(\phi_{bulk})$', r'$\partial \ln(\phi_{bulk}) / \partial \ln(N^*)$')
		
		ax_OP0match.errorbar(phi1_s, Dtop_OP0_match[0, :], yerr=Dtop_OP0_match[1, :], fmt='.', label='data')
		ax_OP0match.plot([min(phi1_s), max(phi1_s)], [0]*2, label='perfect OP0 match')
		
		ax_dF.errorbar(phi1_s[closeOP0_inds], dF[0, closeOP0_inds], yerr=dF[1, closeOP0_inds])
		
		x_draw = np.linspace(min(phi1_s[closeOP0_inds]), max(phi1_s[closeOP0_inds]), 100)
		ax_extrapol.errorbar(phi1_s[closeOP0_inds], Ns[0, closeOP0_inds], yerr=Ns[1, closeOP0_inds], fmt='.', label='data')
		ax_extrapol.plot(x_draw, np.exp(lnNs_fitFnc(np.log(x_draw), lnNs_opt.x)), label=r'$\phi_c = %s$, $\sigma/T = %s$' % (my.f2s(rho_c), my.f2s(sgmT)), color=my.get_my_color(2))
		ax_extrapol.plot(x_draw, np.exp(lnNs_fitFnc(np.log(x_draw), lnNs_fit_prm0)), '--', label=r'init: $\phi_c = %s$, $\sigma/T = %s$' % (my.f2s(np.exp(lnNs_fit_prm0[0])), my.f2s(np.sqrt(np.exp(lnNs_fit_prm0[1]) / np.pi))), color=my.get_my_color(3))
		print(phi1_s[closeOP0_inds])
		print(Ns[0, closeOP0_inds])
		print(Ns[1, closeOP0_inds])
		
		#ax_NsSlp.errorbar(slp_phi1s, 1/slp, yerr=d_slp/slp**2)
		
		my.add_legend(fig_extrapol, ax_extrapol)
		
		plt.show()
	
	
def main():
	mu1_phi1_interp()
	#supersat(verbose=0)

if(__name__ == "__main__"):
	main()

